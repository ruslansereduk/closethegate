import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
function createApiResponse(data: any, status: number = 200): NextResponse {
  const response = NextResponse.json(data, { status });
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è API
  response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
  response.headers.set('Pragma', 'no-cache');
  response.headers.set('Expires', '0');
  
  return response;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://qvwwmtgtzfdojulugngf.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF2d3dtdGd0emZkb2p1bHVnbmdmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzUwMTg3NSwiZXhwIjoyMDczMDc3ODc1fQ.kboDI9L44rBFFZzSqCGL7THYuXwehnT1hqC-_7AmUF0';

console.log('üîß Supabase URL:', SUPABASE_URL);
console.log('üîß Supabase Key exists:', !!SUPABASE_SERVICE_KEY);

// –°–æ–∑–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// –¢–∏–ø—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
interface Message {
  id: string;
  text: string;
  nick: string;
  ts: number;
  reactions?: { [emoji: string]: number };
  userColor?: string;
  userStatus?: string;
  parentId?: string | null; // ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç
  replies?: Message[]; // –û—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
}

interface LoadOlderRequest {
  beforeId: string;
  limit: number;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const { data, error } = await supabase
      .from('messages')
      .select('id')
      .limit(1);

    if (error && error.code === 'PGRST116') {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ messages –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ Supabase Dashboard:');
      console.log(`
CREATE TABLE messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  text TEXT NOT NULL,
  nick VARCHAR(24) NOT NULL,
  ts BIGINT NOT NULL,
  reactions JSONB DEFAULT '{}'::jsonb,
  user_color VARCHAR(7),
  user_status VARCHAR(50),
        -- parent_id UUID REFERENCES messages(id), -- –£–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_messages_ts ON messages(ts DESC);
CREATE INDEX idx_messages_id_ts ON messages(id, ts DESC);
-- CREATE INDEX idx_messages_parent_id ON messages(parent_id); -- –£–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
      `);
    } else if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏
async function getRecentMessages(limit: number = 20): Promise<Message[]> {
  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ parent_id)
  const { data: mainMessages, error: mainError } = await supabase
    .from('messages')
    .select('id, text, nick, ts, reactions, user_color, user_status, parent_id')
    .is('parent_id', null)
    .order('ts', { ascending: false })
    .limit(limit);

  if (mainError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', mainError);
    throw mainError;
  }

  if (!mainMessages || mainMessages.length === 0) {
    return [];
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const mainMessageIds = mainMessages.map(msg => msg.id);
  const { data: replies, error: repliesError } = await supabase
    .from('messages')
    .select('id, text, nick, ts, reactions, user_color, user_status, parent_id')
    .in('parent_id', mainMessageIds)
    .order('ts', { ascending: true }); // –û—Ç–≤–µ—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

  if (repliesError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤:', repliesError);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  const repliesByParent: { [key: string]: Message[] } = {};
  if (replies) {
    replies.forEach(reply => {
      if (!repliesByParent[reply.parent_id]) {
        repliesByParent[reply.parent_id] = [];
      }
      repliesByParent[reply.parent_id].push({
        id: reply.id,
        text: reply.text,
        nick: reply.nick,
        ts: parseInt(reply.ts),
        reactions: reply.reactions || {},
        userColor: reply.user_color,
        userStatus: reply.user_status,
        parentId: reply.parent_id
      });
    });
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Ö –æ—Ç–≤–µ—Ç–∞–º–∏
  return mainMessages.map(row => ({
    id: row.id,
    text: row.text,
    nick: row.nick,
    ts: parseInt(row.ts),
    reactions: row.reactions || {},
    userColor: row.user_color,
    userStatus: row.user_status,
    parentId: null,
    replies: repliesByParent[row.id] || []
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
async function getOlderMessages(beforeId: string, limit: number = 20): Promise<Message[]> {
  // –ü–æ–ª—É—á–∞–µ–º timestamp —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
  const { data: beforeData, error: beforeError } = await supabase
    .from('messages')
    .select('ts')
    .eq('id', beforeId)
    .single();

  if (beforeError || !beforeData) {
    return [];
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ (–±–µ–∑ parent_id)
  const { data: mainMessages, error: mainError } = await supabase
    .from('messages')
    .select('id, text, nick, ts, reactions, user_color, user_status, parent_id')
    .is('parent_id', null)
    .lt('ts', beforeData.ts)
    .order('ts', { ascending: false })
    .limit(limit);

  if (mainError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', mainError);
    throw mainError;
  }

  if (!mainMessages || mainMessages.length === 0) {
    return [];
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const mainMessageIds = mainMessages.map(msg => msg.id);
  const { data: replies, error: repliesError } = await supabase
    .from('messages')
    .select('id, text, nick, ts, reactions, user_color, user_status, parent_id')
    .in('parent_id', mainMessageIds)
    .order('ts', { ascending: true }); // –û—Ç–≤–µ—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

  if (repliesError) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', repliesError);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  const repliesByParent: { [key: string]: Message[] } = {};
  if (replies) {
    replies.forEach(reply => {
      if (!repliesByParent[reply.parent_id]) {
        repliesByParent[reply.parent_id] = [];
      }
      repliesByParent[reply.parent_id].push({
        id: reply.id,
        text: reply.text,
        nick: reply.nick,
        ts: parseInt(reply.ts),
        reactions: reply.reactions || {},
        userColor: reply.user_color,
        userStatus: reply.user_status,
        parentId: reply.parent_id
      });
    });
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Ö –æ—Ç–≤–µ—Ç–∞–º–∏
  return mainMessages.map(row => ({
    id: row.id,
    text: row.text,
    nick: row.nick,
    ts: parseInt(row.ts),
    reactions: row.reactions || {},
    userColor: row.user_color,
    userStatus: row.user_status,
    parentId: null,
    replies: repliesByParent[row.id] || []
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function saveMessage(message: Omit<Message, 'id'>): Promise<Message> {
  const insertData: any = {
    text: message.text,
    nick: message.nick,
    ts: message.ts,
    reactions: message.reactions || {},
    user_color: message.userColor,
    user_status: message.userStatus,
  };

  // –î–æ–±–∞–≤–ª—è–µ–º parent_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (message.parentId) {
    insertData.parent_id = message.parentId;
  }

  const { data, error } = await supabase
    .from('messages')
    .insert(insertData)
    .select('id, text, nick, ts, reactions, user_color, user_status, parent_id')
    .single();

  if (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }

  return {
    id: data.id,
    text: data.text,
    nick: data.nick,
    ts: parseInt(data.ts),
    reactions: data.reactions || {},
    userColor: data.user_color,
    userStatus: data.user_status,
    parentId: data.parent_id || null
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
async function updateReactions(messageId: string, emoji: string): Promise<{ [emoji: string]: number }> {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
  const { data: currentData, error: fetchError } = await supabase
    .from('messages')
    .select('reactions')
    .eq('id', messageId)
    .single();

  if (fetchError || !currentData) {
    throw new Error('Message not found');
  }

  const currentReactions = currentData.reactions || {};
  const newCount = (currentReactions[emoji] || 0) + 1;
  const updatedReactions = { ...currentReactions, [emoji]: newCount };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
  const { error: updateError } = await supabase
    .from('messages')
    .update({ reactions: updatedReactions })
    .eq('id', messageId);

  if (updateError) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π:', updateError);
    throw updateError;
  }

  return updatedReactions;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function deleteMessage(messageId: string): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('messages')
      .delete()
      .eq('id', messageId);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return false;
  }
}

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const action = url.searchParams.get('action');

    if (action === 'recent') {
      const limit = parseInt(url.searchParams.get('limit') || '20');
      const messages = await getRecentMessages(limit);
      return createApiResponse(messages);
    }

    if (action === 'older') {
      const beforeId = url.searchParams.get('beforeId');
      const limit = parseInt(url.searchParams.get('limit') || '20');

      if (!beforeId) {
        return createApiResponse({ error: 'Missing beforeId parameter' }, 400);
      }

      const messages = await getOlderMessages(beforeId, limit);
      return createApiResponse(messages);
    }

    return createApiResponse({ error: 'Unknown action' }, 400);
  } catch (error) {
    console.error('API Error:', error);
    return createApiResponse({ error: 'Internal server error' }, 500);
  }
}

// API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { action } = body;

    if (action === 'send') {
      const { text, nick, ts, reactions, userColor, userStatus, parentId } = body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!text || text.length > 500) {
        return createApiResponse({ error: 'Message too long' }, 400);
      }

      if (!nick || nick.length > 24) {
        return createApiResponse({ error: 'Nickname too long' }, 400);
      }

      const message: Omit<Message, 'id'> = {
        text,
        nick,
        ts: ts || Date.now(),
        reactions: reactions || {},
        userColor,
        userStatus,
        parentId
      };

      const savedMessage = await saveMessage(message);
      return createApiResponse(savedMessage);
    }

    if (action === 'react') {
      const { messageId, emoji } = body;

      if (!messageId || !emoji) {
        return createApiResponse({ error: 'Missing parameters' }, 400);
      }

      const reactions = await updateReactions(messageId, emoji);
      return createApiResponse({ messageId, emoji, count: reactions[emoji] });
    }

    if (action === 'delete') {
      const { messageId } = body;

      if (!messageId) {
        return createApiResponse({ error: 'Missing messageId parameter' }, 400);
      }

      const success = await deleteMessage(messageId);
      if (success) {
        return createApiResponse({ success: true, messageId });
      } else {
        return createApiResponse({ error: 'Message not found or could not be deleted' }, 404);
      }
    }

    return createApiResponse({ error: 'Unknown action' }, 400);
  } catch (error) {
    console.error('API Error:', error);
    return createApiResponse({ error: 'Internal server error' }, 500);
  }
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function testConnection() {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    const { data, error } = await supabase.from('messages').select('id').limit(1);
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
    } else {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
initDatabase();
testConnection();
