import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://qvwwmtgtzfdojulugngf.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF2d3dtdGd0emZkb2p1bHVnbmdmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzUwMTg3NSwiZXhwIjoyMDczMDc3ODc1fQ.kboDI9L44rBFFZzSqCGL7THYuXwehnT1hqC-_7AmUF0';

// –°–æ–∑–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

export async function GET(request: NextRequest) {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const { data, error } = await supabase
      .from('messages')
      .select('id')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error);

      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—ë
      if (error.code === 'PGRST116') {
        console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ messages –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ SQL
        const { error: createError } = await supabase.rpc('exec_sql', {
          sql: `
            CREATE TABLE IF NOT EXISTS messages (
              id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
              text TEXT NOT NULL,
              nick VARCHAR(24) NOT NULL,
              ts BIGINT NOT NULL,
              reactions JSONB DEFAULT '{}'::jsonb,
              user_color VARCHAR(7),
              user_status VARCHAR(50),
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE INDEX IF NOT EXISTS idx_messages_ts ON messages(ts DESC);
            CREATE INDEX IF NOT EXISTS idx_messages_id_ts ON messages(id, ts DESC);
          `
        });

        if (createError) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ RPC');
          console.log('üìã SQL –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:');
          console.log(`
CREATE TABLE messages (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  text TEXT NOT NULL,
  nick VARCHAR(24) NOT NULL,
  ts BIGINT NOT NULL,
  reactions JSONB DEFAULT '{}'::jsonb,
  user_color VARCHAR(7),
  user_status VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_messages_ts ON messages(ts DESC);
CREATE INDEX idx_messages_id_ts ON messages(id, ts DESC);
          `);
          return NextResponse.json({
            error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞',
            message: '–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard',
            sql: '–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message
          }, { status: 500 });
        }

        return NextResponse.json({
          status: '–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
          message: '–¢–µ–ø–µ—Ä—å —á–∞—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å'
        });
      }

      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ Supabase',
        details: error.message,
        code: error.code
      }, { status: 500 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    const { count, error: countError } = await supabase
      .from('messages')
      .select('*', { count: 'exact', head: true });

    return NextResponse.json({
      status: 'Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      supabase_url: SUPABASE_URL,
      table_exists: true,
      messages_count: count || 0,
      key_valid: true
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      message: error.message,
      supabase_url: SUPABASE_URL
    }, { status: 500 });
  }
}
