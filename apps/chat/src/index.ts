import Fastify from 'fastify';
import { Server as SocketIOServer } from 'socket.io';
import { createServer } from 'http';
import cors from 'cors';
import { Pool } from 'pg';

// –¢–∏–ø—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
interface Message {
  id: string;
  text: string;
  nick: string;
  ts: number;
  reactions?: { [emoji: string]: number };
  userColor?: string;
  userStatus?: string;
}

interface LoadOlderRequest {
  beforeId: string;
  limit: number;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = process.env.PORT || 8080;
const ALLOW_ORIGIN = process.env.ALLOW_ORIGIN || 'http://localhost:3000';
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/closethegate';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fastify
const fastify = Fastify({
  logger: true
});

// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = createServer(fastify.server);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const io = new SocketIOServer(server, {
  cors: {
    origin: ALLOW_ORIGIN.split(','),
    methods: ["GET", "POST"],
    credentials: true
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CORS middleware
async function setupCors() {
  await fastify.register(import('@fastify/cors'), {
    origin: ALLOW_ORIGIN.split(','),
    credentials: true
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    const client = await pool.connect();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await client.query(`
      CREATE TABLE IF NOT EXISTS messages (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        text TEXT NOT NULL,
        nick VARCHAR(24) NOT NULL,
        ts BIGINT NOT NULL,
        reactions JSONB DEFAULT '{}'::jsonb,
        user_color VARCHAR(7),
        user_status VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_messages_ts ON messages(ts DESC)
    `);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_messages_id_ts ON messages(id, ts DESC)
    `);
    
    client.release();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function getRecentMessages(limit: number = 20): Promise<Message[]> {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      SELECT id, text, nick, ts, reactions, user_color, user_status
      FROM messages 
      ORDER BY ts DESC 
      LIMIT $1
    `, [limit]);
    
    return result.rows.map(row => ({
      id: row.id,
      text: row.text,
      nick: row.nick,
      ts: parseInt(row.ts),
      reactions: row.reactions || {},
      userColor: row.user_color,
      userStatus: row.user_status
    })); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
async function getOlderMessages(beforeId: string, limit: number = 20): Promise<Message[]> {
  const client = await pool.connect();
  try {
    // –ü–æ–ª—É—á–∞–µ–º timestamp —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
    const beforeResult = await client.query(`
      SELECT ts FROM messages WHERE id = $1
    `, [beforeId]);
    
    if (beforeResult.rows.length === 0) {
      return [];
    }
    
    const beforeTs = beforeResult.rows[0].ts;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
    const result = await client.query(`
      SELECT id, text, nick, ts, reactions, user_color, user_status
      FROM messages 
      WHERE ts < $1
      ORDER BY ts DESC 
      LIMIT $2
    `, [beforeTs, limit]);
    
    return result.rows.map(row => ({
      id: row.id,
      text: row.text,
      nick: row.nick,
      ts: parseInt(row.ts),
      reactions: row.reactions || {},
      userColor: row.user_color,
      userStatus: row.user_status
    })); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function saveMessage(message: Omit<Message, 'id'>): Promise<Message> {
  const client = await pool.connect();
  try {
    const result = await client.query(`
      INSERT INTO messages (text, nick, ts, reactions, user_color, user_status)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id, text, nick, ts, reactions, user_color, user_status
    `, [
      message.text,
      message.nick,
      message.ts,
      JSON.stringify(message.reactions || {}),
      message.userColor,
      message.userStatus
    ]);
    
    const row = result.rows[0];
    return {
      id: row.id,
      text: row.text,
      nick: row.nick,
      ts: parseInt(row.ts),
      reactions: row.reactions || {},
      userColor: row.user_color,
      userStatus: row.user_status
    };
  } finally {
    client.release();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π
async function updateReactions(messageId: string, emoji: string): Promise<{ [emoji: string]: number }> {
  const client = await pool.connect();
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
    const result = await client.query(`
      SELECT reactions FROM messages WHERE id = $1
    `, [messageId]);
    
    if (result.rows.length === 0) {
      throw new Error('Message not found');
    }
    
    const currentReactions = result.rows[0].reactions || {};
    const newCount = (currentReactions[emoji] || 0) + 1;
    const updatedReactions = { ...currentReactions, [emoji]: newCount };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
    await client.query(`
      UPDATE messages SET reactions = $1 WHERE id = $2
    `, [JSON.stringify(updatedReactions), messageId]);
    
    return updatedReactions;
  } finally {
    client.release();
  }
}

// Health check endpoint
fastify.get('/health', async (request, reply) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const client = await pool.connect();
    await client.query('SELECT 1');
    client.release();
    
    return { 
      status: 'ok', 
      timestamp: new Date().toISOString(),
      database: 'connected'
    };
  } catch (error) {
    reply.code(500);
    return { 
      status: 'error', 
      timestamp: new Date().toISOString(),
      database: 'disconnected',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
});

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', async (socket) => {
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const recentMessages = await getRecentMessages(20);
    socket.emit('recent', recentMessages);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('msg', async (data: Omit<Message, 'id' | 'ts'>) => {
    try {
      const message: Omit<Message, 'id'> = {
        ...data,
        ts: Date.now()
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!message.text || message.text.length > 500) {
        socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)' });
        return;
      }
      
      if (!message.nick || message.nick.length > 24) {
        socket.emit('error', { message: '–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 24 —Å–∏–º–≤–æ–ª–∞)' });
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const savedMessage = await saveMessage(message);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      io.emit('msg', savedMessage);
      
      console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.nick}: ${message.text.substring(0, 50)}...`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π
  socket.on('react', async (data: { msgId: string; emoji: string }) => {
    try {
      const reactions = await updateReactions(data.msgId, data.emoji);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      io.emit('reaction', {
        msgId: data.msgId,
        emoji: data.emoji,
        count: reactions[data.emoji]
      });
      
      console.log(`üëç –†–µ–∞–∫—Ü–∏—è ${data.emoji} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${data.msgId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏' });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
  socket.on('loadOlder', async (data: LoadOlderRequest) => {
    try {
      console.log(`üìú –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ ${data.beforeId}, –ª–∏–º–∏—Ç: ${data.limit}`);
      
      const olderMessages = await getOlderMessages(data.beforeId, data.limit);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      socket.emit('olderMessages', olderMessages);
      
      console.log(`üìú –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${olderMessages.length} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π' });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  try {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
    await setupCors();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await server.listen({ port: PORT, host: '0.0.0.0' });
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: ${ALLOW_ORIGIN}`);
    console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${DATABASE_URL.split('@')[1] || 'localhost'}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await pool.end();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await pool.end();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
start();
