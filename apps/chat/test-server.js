const { Server: SocketIOServer } = require('socket.io');
const { createServer } = require('http');
const Fastify = require('fastify');

const PORT = process.env.PORT || 8081;
const ALLOW_ORIGIN = process.env.ALLOW_ORIGIN || 'http://localhost:3000';

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä–∞...');

// –°–æ–∑–¥–∞–µ–º Fastify –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const fastify = Fastify({ logger: true });

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = createServer(fastify.server);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO
const io = new SocketIOServer(server, {
  cors: {
    origin: ALLOW_ORIGIN.split(','),
    methods: ["GET", "POST"],
    credentials: true
  }
});

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
let messages = [];

// Health check endpoint
fastify.get('/health', async (request, reply) => {
  return { 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    database: 'in-memory',
    messagesCount: messages.length
  };
});

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  socket.emit('recent', messages.slice(-20));
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('msg', (data) => {
    const message = {
      id: Date.now().toString(),
      ...data,
      ts: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    messages.push(message);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
    if (messages.length > 100) {
      messages = messages.slice(-100);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    io.emit('msg', message);
    
    console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.nick}: ${message.text.substring(0, 50)}...`);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π
  socket.on('react', (data) => {
    const messageIndex = messages.findIndex(msg => msg.id === data.msgId);
    if (messageIndex !== -1) {
      if (!messages[messageIndex].reactions) {
        messages[messageIndex].reactions = {};
      }
      messages[messageIndex].reactions[data.emoji] = 
        (messages[messageIndex].reactions[data.emoji] || 0) + 1;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      io.emit('reaction', {
        msgId: data.msgId,
        emoji: data.emoji,
        count: messages[messageIndex].reactions[data.emoji]
      });
      
      console.log(`üëç –†–µ–∞–∫—Ü–∏—è ${data.emoji} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ${data.msgId}`);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  try {
    await server.listen({ port: PORT, host: '0.0.0.0' });
    console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: ${ALLOW_ORIGIN}`);
    console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

start();


