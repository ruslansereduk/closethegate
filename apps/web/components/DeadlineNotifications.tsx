"use client";
import { useEffect, useState } from "react";

interface Notification {
  id: string;
  message: string;
  type: 'warning' | 'danger' | 'info';
  emoji: string;
}

// –ó–ª—ã–µ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const IRONIC_MESSAGES: Array<{message: string; emoji: string; type: 'warning' | 'danger' | 'info'}> = [
  { message: "–ï—Å–ª–∏ —Ç—ã –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ - —É—Å–∫–æ–ª—å–∑–Ω–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!", emoji: "üèÉ‚Äç‚ôÇÔ∏è", type: "danger" },
  { message: "–ü–µ—Ä–µ–π–¥–∏ –≤ –∞–≤—Ç–æ–±—É—Å –ø–æ–±–ª–∏–∂–µ, —Ç–∞–º —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!", emoji: "üöå", type: "warning" },
  { message: "–î–∞–π –≤–∑—è—Ç–∫—É... —à—É—á—É, –ª—É—á—à–µ –Ω–µ –Ω–∞–¥–æ!", emoji: "üí∞", type: "info" },
  { message: "–°—Ç–∞–Ω—å –Ω–µ–≤–∏–¥–∏–º—ã–º - —ç—Ç–æ —Ç–æ—á–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç!", emoji: "üëª", type: "danger" },
  { message: "–ù–∞—É—á–∏—Å—å –≥–∏–ø–Ω–æ–∑—É, –∑–∞–≥–∏–ø–Ω–æ—Ç–∏–∑–∏—Ä—É–π –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫–∞!", emoji: "üåÄ", type: "warning" },
  { message: "–°—Ç–∞–Ω—å —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º –∏ –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω–∏ –≥—Ä–∞–Ω–∏—Ü—É!", emoji: "ü¶∏‚Äç‚ôÇÔ∏è", type: "info" },
];

export default function DeadlineNotifications() {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  useEffect(() => {
    const timer = setTimeout(() => {
      const randomMessage = IRONIC_MESSAGES[Math.floor(Math.random() * IRONIC_MESSAGES.length)];
      const notification: Notification = {
        id: `ironic-${Date.now()}`,
        message: randomMessage.message,
        type: randomMessage.type,
        emoji: randomMessage.emoji,
      };

      setNotifications([notification]);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setNotifications([]);
      }, 6000);
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –¥–µ–º–æ)
  useEffect(() => {
    const interval = setInterval(() => {
      const randomMessage = IRONIC_MESSAGES[Math.floor(Math.random() * IRONIC_MESSAGES.length)];
      const notification: Notification = {
        id: `ironic-${Date.now()}`,
        message: randomMessage.message,
        type: randomMessage.type,
        emoji: randomMessage.emoji,
      };

      setNotifications([notification]);

      setTimeout(() => {
        setNotifications([]);
      }, 6000);
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ

    return () => clearInterval(interval);
  }, []);

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  };

  const getNotificationStyles = (type: string) => {
    switch (type) {
      case 'danger':
        return 'bg-red-900/90 border-red-700 text-red-100';
      case 'warning':
        return 'bg-yellow-900/90 border-yellow-700 text-yellow-100';
      case 'info':
        return 'bg-blue-900/90 border-blue-700 text-blue-100';
      default:
        return 'bg-neutral-900/90 border-neutral-700 text-neutral-100';
    }
  };

  if (notifications.length === 0) return null;

  return (
    <div className="fixed top-4 right-4 z-50 space-y-2 max-w-sm">
      {notifications.map(notification => (
        <div
          key={notification.id}
          className={`p-4 rounded-lg border backdrop-blur-sm shadow-lg animate-slide-in-right hover-lift ${getNotificationStyles(notification.type)}`}
        >
          <div className="flex items-start justify-between gap-2">
            <div className="flex items-center gap-2">
              <span className="text-lg">{notification.emoji}</span>
              <span className="font-medium text-sm">{notification.message}</span>
            </div>
            <button
              onClick={() => removeNotification(notification.id)}
              className="text-neutral-400 hover:text-neutral-200 transition-colors"
            >
              ‚úï
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}
