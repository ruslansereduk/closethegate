const { Pool } = require('pg');

// –ü—Ä–æ–¥–∞–∫—à–Ω URL –∏–∑ .env.local
const PROD_DATABASE_URL = 'postgresql://postgres.qvwwmtgtzfdojulugngf:EnekValli123!@aws-1-eu-central-1.pooler.supabase.com:6543/postgres';

async function testProdConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î...\n');
  
  const pool = new Pool({
    connectionString: PROD_DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });
  
  try {
    const client = await pool.connect();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î!');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤–µ—Ä—Å–∏—é PostgreSQL
    const versionResult = await client.query('SELECT version()');
    console.log(`üìä PostgreSQL: ${versionResult.rows[0].version.split(' ')[0]} ${versionResult.rows[0].version.split(' ')[1]}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (${tablesResult.rows.length}):`);
    tablesResult.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É messages –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const messagesCheck = await client.query(`
      SELECT COUNT(*) as count 
      FROM information_schema.tables 
      WHERE table_name = 'messages'
    `);
    
    if (messagesCheck.rows[0].count > 0) {
      const messagesCount = await client.query('SELECT COUNT(*) as count FROM messages');
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: ${messagesCount.rows[0].count}`);
    }
    
    client.release();
    await pool.end();
    
    console.log('\n‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î:');
    console.log(`   ${error.message}`);
    await pool.end();
    return false;
  }
}

testProdConnection();
