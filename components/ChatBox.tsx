"use client";
import React, { useEffect, useRef, useState, useMemo, useCallback } from "react";
import dayjs from "dayjs";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π
function ClientOnly({ children }: { children: React.ReactNode }) {
  const [hasMounted, setHasMounted] = useState(false);

  useEffect(() => {
    setHasMounted(true);
  }, []);

  if (!hasMounted) {
    return (
      <div className="w-full max-w-2xl mx-auto p-4 text-center text-muted-foreground">
        <div className="bg-muted/10 border border-border rounded-lg p-4 shadow-sm">
          <div className="text-muted-foreground font-semibold mb-2">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</div>
          <div className="text-sm">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</div>
        </div>
      </div>
    );
  }

  return <>{children}</>;
}

type Msg = {
  id: string;
  text: string;
  nick: string;
  ts: number;
  reactions?: { [emoji: string]: number };
  isNew?: boolean;
  userColor?: string;
  userStatus?: string | { text: string; emoji: string; color: string; };
  flagged?: boolean;
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤
const USER_COLORS = [
  '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57',
  '#ff9ff3', '#54a0ff', '#5f27cd', '#00d2d3', '#ff9f43',
  '#10ac84', '#ee5a24', '#0984e3', '#6c5ce7', '#a29bfe',
  '#fd79a8', '#fdcb6e', '#e17055', '#81ecec', '#fab1a0'
];

// –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USER_STATUSES = [
  { text: '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ', emoji: 'üöß', color: 'text-red-400' },
  { text: '–≤ –æ—á–µ—Ä–µ–¥–∏', emoji: '‚è≥', color: 'text-yellow-400' },
  { text: '–ø—Ä–æ—à–µ–ª', emoji: '‚úÖ', color: 'text-green-400' },
  { text: '–≤–µ—Ä–Ω—É–ª—Å—è', emoji: 'üîÑ', color: 'text-blue-400' },
  { text: '–∂–¥–µ—Ç', emoji: 'üò¥', color: 'text-purple-400' },
  { text: '–ø–∞–Ω–∏–∫—É–µ—Ç', emoji: 'üò±', color: 'text-pink-400' },
  { text: '–≥–æ—Ç–æ–≤–∏—Ç—Å—è', emoji: 'üéí', color: 'text-orange-400' },
  { text: '—Ä–∞–∑–º—ã—à–ª—è–µ—Ç', emoji: 'ü§î', color: 'text-indigo-400' }
];

// –ù–µ–±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–ª—è –º—è–≥–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const STOP_WORDS = [
  '–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '—Å—É–∫–∞', '–º—Ä–∞–∑—å', '—Å–≤–æ–ª–æ—á—å', '—É–±–ª—é–¥–æ–∫', '–Ω–µ–Ω–∞–≤–∏–∂—É'
];

function maskStopwords(text: string): string {
  return STOP_WORDS.reduce((acc, word) => {
    const re = new RegExp(`\\b${word}\\b`, 'gi');
    return acc.replace(re, (m) => m[0] + '***');
  }, text);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
function getUserColor(nick: string): string {
  let hash = 0;
  for (let i = 0; i < nick.length; i++) {
    hash = nick.charCodeAt(i) + ((hash << 5) - hash);
  }
  return USER_COLORS[Math.abs(hash) % USER_COLORS.length];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
function getRandomStatus() {
  return USER_STATUSES[Math.floor(Math.random() * USER_STATUSES.length)];
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
const MessageItem = React.memo(({
  m,
  getUserColor,
  react,
  report
}: {
  m: Msg;
  getUserColor: (nick: string) => string;
  react: (msgId: string, emoji: string) => void;
  report: (msg: Msg) => void;
}) => {
  const handleAnimationEnd = useCallback(() => {
    if (m.isNew) {
      // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ isNew –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  }, [m.isNew]);

  return (
    <div
      className={`text-sm group hover:bg-muted/30 p-2 rounded-lg transition-all duration-300 ${
        m.isNew ? 'animate-slide-in-right bg-primary/10 border-l-4 border-primary' : ''
      }`}
      onAnimationEnd={handleAnimationEnd}
    >
      <div className="flex justify-between items-start gap-2">
        <div className="flex-1 min-w-0">
          <div className="flex flex-wrap items-center gap-1 mb-1">
            <span className="text-muted-foreground text-xs">{new Date(m.ts).toLocaleTimeString()}</span>
            <span
              className="font-medium"
              style={{ color: m.userColor || getUserColor(m.nick) }}
            >
              {m.nick}:
            </span>
            {m.userStatus && (
              <span className={`text-xs px-2 py-0.5 rounded-full bg-muted ${
                typeof m.userStatus === 'string'
                  ? 'text-muted-foreground'
                  : (m.userStatus?.color || 'text-muted-foreground')
              }`}>
                {typeof m.userStatus === 'string'
                  ? `üë§ ${m.userStatus}`
                  : `${m.userStatus?.emoji || 'üë§'} ${m.userStatus?.text || m.userStatus}`
                }
              </span>
            )}
          </div>
          <div className="break-words">{m.text}</div>
        </div>
        <div className="flex gap-1 opacity-100 sm:opacity-0 sm:group-hover:opacity-100 transition-opacity flex-shrink-0">
          <button
            onClick={() => react(m.id, "üëç")}
            className="text-xs hover:scale-125 transition-transform px-2 py-1 sm:px-1 sm:py-0.5 rounded hover:bg-muted touch-manipulation"
            title="–ù—Ä–∞–≤–∏—Ç—Å—è"
          >
            üëç
          </button>
          <button
            onClick={() => react(m.id, "üòÇ")}
            className="text-xs hover:scale-125 transition-transform px-2 py-1 sm:px-1 sm:py-0.5 rounded hover:bg-muted touch-manipulation"
            title="–°–º–µ—à–Ω–æ"
          >
            üòÇ
          </button>
          <button
            onClick={() => react(m.id, "üòÆ")}
            className="text-xs hover:scale-125 transition-transform px-2 py-1 sm:px-1 sm:py-0.5 rounded hover:bg-muted touch-manipulation"
            title="–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ"
          >
            üòÆ
          </button>
          <button
            onClick={() => react(m.id, "üò¢")}
            className="text-xs hover:scale-125 transition-transform px-2 py-1 sm:px-1 sm:py-0.5 rounded hover:bg-muted touch-manipulation"
            title="–ì—Ä—É—Å—Ç–Ω–æ"
          >
            üò¢
          </button>
          <button
            onClick={() => report(m)}
            className="text-xs px-2 py-1 sm:px-1 sm:py-0.5 rounded hover:bg-destructive/10 border border-destructive/20 text-destructive touch-manipulation"
            title="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"
          >
            ‚öë
          </button>
        </div>
      </div>
      {m.reactions && Object.keys(m.reactions).length > 0 && (
        <div className="flex gap-1 mt-1 flex-wrap">
          {Object.entries(m.reactions).map(([emoji, count]) => (
            <button
              key={emoji}
              onClick={() => react(m.id, emoji)}
              className="text-xs bg-muted hover:bg-muted/80 px-1.5 py-0.5 rounded-full flex items-center gap-1 transition-colors animate-fade-in-up"
            >
              <span>{emoji}</span>
              <span>{count}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
});

function ChatBoxInner() {
  const [ready, setReady] = useState(false);
  const [msgs, setMsgs] = useState<Msg[]>([]);
  const [text, setText] = useState("");
  const [nick, setNick] = useState("–ê–Ω–æ–Ω–∏–º");
  const [userStatus, setUserStatus] = useState<{ text: string; emoji: string; color: string; } | null>(null);
  const [isMounted, setIsMounted] = useState(false);
  const listRef = useRef<HTMLDivElement>(null);
  const [lastSend, setLastSend] = useState(0);
  const [isConnecting, setIsConnecting] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [hasMoreMessages, setHasMoreMessages] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [oldestMessageId, setOldestMessageId] = useState<string | null>(null);
  const [allMessages, setAllMessages] = useState<Msg[]>([]);
  const [displayedMessages, setDisplayedMessages] = useState<Msg[]>([]);

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  const MAX_DISPLAYED_MESSAGES = 100;

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserColorMemo = useCallback((nick: string): string => {
    return getUserColor(nick);
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    setIsMounted(true);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    try {
      const savedStatus = localStorage.getItem('ctg-status');
      if (savedStatus) {
        const found = USER_STATUSES.find(s => s.text === savedStatus);
        if (found) {
          setUserStatus(found);
        } else {
          setUserStatus(getRandomStatus());
        }
      } else {
        setUserStatus(getRandomStatus());
      }

      const savedNick = localStorage.getItem('ctg-nick');
      if (savedNick) {
        setNick(savedNick);
      }
    } catch {
      setUserStatus(getRandomStatus());
    }
  }, []);

  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (isMounted) {
      try {
        if (userStatus && typeof userStatus !== 'string') {
          localStorage.setItem('ctg-status', userStatus.text);
        }
        localStorage.setItem('ctg-nick', nick);
      } catch {}
    }
  }, [userStatus, nick, isMounted]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
  useEffect(() => {
    if (!isMounted) return;

    console.log('üîß ChatBox: –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç)
    const autoLoadTimeout = setTimeout(() => {
      console.log('üîß ChatBox: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç');
      onFirstInteraction();
    }, 2000);

    const onFirstInteraction = async () => {
      console.log('üîß ChatBox: –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è');
      clearTimeout(autoLoadTimeout); // –û—á–∏—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä
      setIsConnecting(true);
      setConnectionError(null);

      try {
        console.log('üîß ChatBox: –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API');
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API (Supabase)
        let response = await fetch('/api/chat?action=recent&limit=20');

        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π
        if (!response.ok) {
          console.log('üîß ChatBox: –û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å:', response.status, '), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π');
          response = await fetch('/api/chat-simple?action=recent&limit=20');
        }

        if (!response.ok) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        }

        const messages = await response.json();
        console.log('üîß ChatBox: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messages.length);
        const messagesWithColors = messages.map((item: any) => ({
          ...item,
          userColor: item.userColor || getUserColorMemo(item.nick),
          userStatus: item.userStatus || { text: '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ', emoji: 'üöß', color: 'text-red-400' }
        }));

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        const sortedMessages = messagesWithColors.sort((a: Msg, b: Msg) => b.ts - a.ts);
        setAllMessages(sortedMessages);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const recentMessages = sortedMessages.slice(0, 20);
        setDisplayedMessages(recentMessages);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if (messagesWithColors.length > 0) {
          const oldestMsg = messagesWithColors.reduce((oldest: Msg, current: Msg) =>
            current.ts < oldest.ts ? current : oldest
          );
          setOldestMessageId(oldestMsg.id);
          setHasMoreMessages(messagesWithColors.length >= 20);
        }

        console.log('üîß ChatBox: –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        setReady(true);
        setIsConnecting(false);
      } catch (error) {
        console.error('üîß ChatBox: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        setConnectionError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
        setIsConnecting(false);
      }

      window.removeEventListener('pointerdown', onFirstInteraction);
      window.removeEventListener('keydown', onFirstInteraction);
    };

    window.addEventListener('pointerdown', onFirstInteraction, { once: true });
    window.addEventListener('keydown', onFirstInteraction, { once: true });

    return () => {
      clearTimeout(autoLoadTimeout);
      window.removeEventListener('pointerdown', onFirstInteraction);
      window.removeEventListener('keydown', onFirstInteraction);
    };
  }, [isMounted, getUserColorMemo]);

  useEffect(() => {
    if (listRef.current) {
      const isNearTop = listRef.current.scrollTop <= 100;
      if (isNearTop) {
        listRef.current.scrollTo({ top: 0, behavior: "smooth" });
      }
    }
  }, [displayedMessages.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadOlderMessages = useCallback(async () => {
    if (isLoadingMore || !hasMoreMessages || !oldestMessageId) {
      return;
    }

    setIsLoadingMore(true);
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API (Supabase)
      let response = await fetch(`/api/chat?action=older&beforeId=${oldestMessageId}&limit=20`);

      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π
      if (!response.ok) {
        console.log('–û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π...');
        response = await fetch(`/api/chat-simple?action=older&beforeId=${oldestMessageId}&limit=20`);
      }

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      const messages = await response.json();
      const messagesWithColors = messages.map((item: any) => ({
        ...item,
        userColor: item.userColor || getUserColorMemo(item.nick),
        userStatus: item.userStatus || { text: '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ', emoji: 'üöß', color: 'text-red-400' }
      }));

      setAllMessages(prev => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        const combined = [...messagesWithColors, ...prev];
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        return combined.sort((a, b) => b.ts - a.ts);
      });

      setDisplayedMessages(prev => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ (—Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã–µ —Ç–µ–ø–µ—Ä—å –≤–≤–µ—Ä—Ö—É)
        const combined = [...prev, ...messagesWithColors];
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return combined.sort((a, b) => b.ts - a.ts).slice(0, MAX_DISPLAYED_MESSAGES);
      });

      setIsLoadingMore(false);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      if (messagesWithColors.length > 0) {
        const oldestMsg = messagesWithColors.reduce((oldest: Msg, current: Msg) =>
          current.ts < oldest.ts ? current : oldest
        );
        setOldestMessageId(oldestMsg.id);
        setHasMoreMessages(messagesWithColors.length >= 20);
      } else {
        setHasMoreMessages(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      setIsLoadingMore(false);
    }
  }, [isLoadingMore, hasMoreMessages, oldestMessageId, getUserColorMemo]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const listElement = listRef.current;
    if (!listElement) return;

    const handleScroll = () => {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤ —Å–∞–º—ã–π –Ω–∏–∑ –∏ –µ—Å—Ç—å –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (listElement.scrollTop + listElement.clientHeight >= listElement.scrollHeight - 5 && hasMoreMessages && !isLoadingMore) {
        loadOlderMessages();
      }
    };

    listElement.addEventListener('scroll', handleScroll);
    return () => listElement.removeEventListener('scroll', handleScroll);
  }, [hasMoreMessages, isLoadingMore, loadOlderMessages]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      const newHeight = Math.min(textareaRef.current.scrollHeight, 200);
      textareaRef.current.style.height = `${newHeight}px`;
    }
  }, [text]);

  const send = useCallback(async () => {
    const t = text.trim();
    if (!t || !ready) return;
    const now = Date.now();
    if (now - lastSend < 500) return; // –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (t.startsWith('/')) {
      handleCommand(t);
      setText("");
      return;
    }

    const filtered = maskStopwords(t);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API (Supabase)
      let response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'send',
          text: filtered,
          nick,
          ts: now,
          reactions: {},
          userColor: getUserColorMemo(nick),
          userStatus: userStatus ? userStatus.text : '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ'
        })
      });

      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π
      if (!response.ok) {
        console.log('–û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π...');
        response = await fetch('/api/chat-simple', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'send',
            text: filtered,
            nick,
            ts: now,
            reactions: {},
            userColor: getUserColorMemo(nick),
            userStatus: userStatus ? userStatus.text : '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ'
          })
        });
      }

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }

      const savedMessage = await response.json();

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
      const newMessageWithColor = {
        ...savedMessage,
        userColor: savedMessage.userColor || getUserColorMemo(savedMessage.nick),
        userStatus: savedMessage.userStatus || { text: '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ', emoji: 'üöß', color: 'text-red-400' },
        isNew: true
      };

      setAllMessages(prev => [newMessageWithColor, ...prev]);
      setDisplayedMessages(prev => {
        const updated = [newMessageWithColor, ...prev];
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        return updated.slice(0, MAX_DISPLAYED_MESSAGES);
      });

      setLastSend(now);
      setText("");
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      setConnectionError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, [text, ready, lastSend, nick, userStatus, getUserColorMemo]);

  function handleCommand(command: string) {
    const cmd = command.toLowerCase();

    if (cmd === '/help') {
      const helpText = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/time - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
/joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞ –ø—Ä–æ –≥—Ä–∞–Ω–∏—Ü—ã`;

      addSystemMessage(helpText, "–°–∏—Å—Ç–µ–º–∞", "#ff6b6b");
    } else if (cmd === '/time') {
      const deadlineIso = process.env.NEXT_PUBLIC_DEADLINE_ISO || "2025-01-01T00:00:00+02:00";
      const deadline = dayjs(deadlineIso);
      const now = dayjs();
      const diff = deadline.diff(now);
      const dur = dayjs.duration(Math.max(diff, 0));

      const timeText = diff <= 0
        ? "–ì—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞! üò±"
        : `–î–æ –∑–∞–∫—Ä—ã—Ç–∏—è: ${Math.floor(dur.asDays())}–¥ ${dur.hours()}—á ${dur.minutes()}–º ${dur.seconds()}—Å`;

      addSystemMessage(timeText, "–°–∏—Å—Ç–µ–º–∞", "#4ecdc4");
    } else if (cmd === '/joke') {
      const jokes = [
        "–ü–æ—á–µ–º—É –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫–∏ –Ω–µ –∏–≥—Ä–∞—é—Ç –≤ –ø—Ä—è—Ç–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç! üòÑ",
        "–ß—Ç–æ —Å–∫–∞–∑–∞–ª —á–µ–º–æ–¥–∞–Ω –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫—É? '–Ø –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–µ–∑–¥–æ–º!' üß≥",
        "–ü–æ—á–µ–º—É –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–µ –ó–æ–ª—É—à–∫–∞! üïõ",
        "–ß—Ç–æ –æ–±—â–µ–≥–æ —É –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ—Ç–∞? –û–±–∞ –ª—é–±—è—Ç —Å–∏–¥–µ—Ç—å –Ω–∞ –ø–æ—Ä–æ–≥–µ! üê±",
        "–ü–æ—á–µ–º—É —Ç—É—Ä–∏—Å—Ç—ã –Ω–µ –±–æ—è—Ç—Å—è –≥—Ä–∞–Ω–∏—Ü? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å –ø–∞—Å–ø–æ—Ä—Ç! üìò",
        "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ? '–Ø –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, —á—Ç–æ —è —Ç–∞–∫–æ–π —Ç–æ–ª—Å—Ç—ã–π!' üìñ"
      ];

      const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
      addSystemMessage(randomJoke, "–°–∏—Å—Ç–µ–º–∞", "#f6ad55");
    } else {
      addSystemMessage(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`, "–°–∏—Å—Ç–µ–º–∞", "#fc8181");
    }
  }

  const addSystemMessage = (text: string, nick: string, color: string) => {
    const systemMessage = {
      id: `system-${Date.now()}`,
      text,
      nick,
      ts: Date.now(),
      reactions: {},
      userColor: color,
      userStatus: "—Å–∏—Å—Ç–µ–º–∞"
    };

    setAllMessages(prev => [systemMessage, ...prev]);
    setDisplayedMessages(prev => {
      const updated = [systemMessage, ...prev];
      return updated.slice(0, MAX_DISPLAYED_MESSAGES);
    });
  };

  const react = useCallback(async (msgId: string, emoji: string) => {
    if (!ready) return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API (Supabase)
      let response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'react',
          messageId: msgId,
          emoji: emoji
        })
      });

      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π
      if (!response.ok) {
        console.log('–û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π...');
        response = await fetch('/api/chat-simple', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            action: 'react',
            messageId: msgId,
            emoji: emoji
          })
        });
      }

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é');
      }

      const result = await response.json();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      const updateReactions = (messages: Msg[]) => messages.map(msg =>
        msg.id === msgId
          ? {
              ...msg,
              reactions: {
                ...msg.reactions,
                [emoji]: result.count
              }
            }
          : msg
      );

      setAllMessages(updateReactions);
      setDisplayedMessages(updateReactions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏:', error);
    }
  }, [ready]);

  const REPORT_ENDPOINT = "/api/report";

  const report = useCallback(async (m: Msg) => {
    try {
      await fetch(REPORT_ENDPOINT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: m.id, text: m.text, nick: m.nick, ts: m.ts })
      });

      const updateFlagged = (messages: Msg[]) => messages.map(x => x.id === m.id ? { ...x, flagged: true } : x);
      setAllMessages(updateFlagged);
      setDisplayedMessages(updateFlagged);
    } catch {}
  }, []);

  if (connectionError) {
    return (
      <div className="w-full max-w-2xl mx-auto p-4">
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4 text-center shadow-sm">
          <div className="text-destructive font-semibold mb-2">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</div>
          <div className="text-sm text-muted-foreground mb-3">{connectionError}</div>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-destructive hover:bg-destructive/90 text-destructive-foreground rounded-lg text-sm transition-colors shadow-sm"
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-2xl mx-auto px-2 sm:px-4 md:px-0">
      <div className="text-sm text-muted-foreground flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</span>
          {displayedMessages.length > 0 && (
            <span className="text-xs text-muted-foreground">
              ({displayedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π{hasMoreMessages ? '+' : ''})
            </span>
          )}
          {isConnecting && (
            <div className="flex items-center gap-1 text-xs text-accent-foreground">
              <div className="w-2 h-2 bg-accent-foreground rounded-full animate-pulse"></div>
              <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>
            </div>
          )}
          {ready && !isConnecting && (
            <div className="flex items-center gap-1 text-xs text-primary">
              <div className="w-2 h-2 bg-primary rounded-full"></div>
              <span>–ü–æ–¥–∫–ª—é—á–µ–Ω</span>
            </div>
          )}
        </div>
        <div className="flex items-center gap-2">
          <span
            className="text-xs font-medium"
            style={{ color: getUserColorMemo(nick) }}
          >
            {nick}
          </span>
          {userStatus && (
            <span className={`text-xs px-2 py-0.5 rounded-full bg-muted ${userStatus.color}`}>
              {userStatus.emoji} {userStatus.text}
            </span>
          )}
        </div>
      </div>
      <div ref={listRef} className="h-80 sm:h-72 md:h-80 overflow-y-auto rounded-2xl bg-card p-3 space-y-2 border border-border shadow-sm">
        {displayedMessages.map(m => (
          <MessageItem
            key={m.id}
            m={m}
            getUserColor={getUserColorMemo}
            react={react}
            report={report}
          />
        ))}
        {displayedMessages.length === 0 && <div className="text-muted-foreground">–¢–∏—à–∏–Ω–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ</div>}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {hasMoreMessages && (
          <div className="flex justify-center py-2">
            <button
              onClick={loadOlderMessages}
              disabled={isLoadingMore}
              className="px-4 py-2 text-xs bg-muted hover:bg-muted/80 text-muted-foreground rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {isLoadingMore ? (
                <>
                  <div className="w-3 h-3 border border-muted-foreground border-t-transparent rounded-full animate-spin"></div>
                  <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </>
              ) : (
                <>
                  <span>üìú</span>
                  <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</span>
                </>
              )}
            </button>
          </div>
        )}
      </div>
      <div className="mt-3 space-y-3">
        {/* –ü–æ–ª–µ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ */}
        <div className="space-y-2">
          <div className="flex gap-2">
            <input
              className="flex-1 bg-input border border-border rounded-xl px-3 py-2 text-sm outline-none focus:border-ring focus:ring-1 focus:ring-ring transition-colors shadow-sm"
              placeholder="–í–∞—à –Ω–∏–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={nick}
              onChange={e => setNick(e.target.value)}
            />
            <select
              className="bg-input border border-border rounded-xl px-3 py-2 text-sm min-w-0 outline-none focus:border-ring focus:ring-1 focus:ring-ring transition-colors shadow-sm"
              value={userStatus ? userStatus.text : ''}
              onChange={e => {
                const status = USER_STATUSES.find(s => s.text === e.target.value);
                if (status) setUserStatus(status);
              }}
            >
              {USER_STATUSES.map(status => (
                <option key={status.text} value={status.text}>
                  {status.emoji} {status.text}
                </option>
              ))}
            </select>
          </div>
          <div className="text-xs text-muted-foreground text-center">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
          </div>
        </div>

        {/* –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –≤–≤–æ–¥–∞: –ø–æ–ª–µ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ */}
        <div className="flex items-end bg-input border border-border rounded-xl shadow-sm focus-within:border-ring focus-within:ring-1 focus-within:ring-ring transition-all">
          <textarea
            ref={textareaRef}
            rows={2}
            value={text}
            onChange={(e) => setText(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            disabled={!ready}
            className="flex-1 resize-none bg-transparent px-3 py-2 text-sm outline-none disabled:opacity-50 border-0 focus:ring-0"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                send();
              }
            }}
          />
          <button
            type="button"
            onClick={send}
            disabled={!ready || !text.trim()}
            className="px-4 py-3 sm:px-3 sm:py-2 m-1 rounded-lg bg-destructive hover:bg-destructive/90 text-destructive-foreground text-sm font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-1 min-w-[90px] sm:min-w-[80px] touch-manipulation"
          >
            <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
            <span className="text-xs">üì§</span>
          </button>
        </div>
      </div>

      <div className="mt-2 text-xs text-muted-foreground text-center space-y-1">
        <div>–ü—Ä–æ—Å—å–±–∞ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—é –∑–∞–∫–æ–Ω–∞</div>
      </div>
    </div>
  );
}

export default function ChatBox() {
  return (
    <ClientOnly>
      <ChatBoxInner />
    </ClientOnly>
  );
}