"use client";
import React, { useEffect, useRef, useState, useMemo, useCallback } from "react";
import { io, Socket } from "socket.io-client";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import { PromptBox } from "@/components/ui/chatgpt-prompt-input";
dayjs.extend(duration);
type Msg = { 
  id: string; 
  text: string; 
  nick: string; 
  ts: number; 
  reactions?: { [emoji: string]: number }; 
  isNew?: boolean;
  userColor?: string;
  userStatus?: string | { text: string; emoji: string; color: string; };
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–æ–≤
const USER_COLORS = [
  '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57',
  '#ff9ff3', '#54a0ff', '#5f27cd', '#00d2d3', '#ff9f43',
  '#10ac84', '#ee5a24', '#0984e3', '#6c5ce7', '#a29bfe',
  '#fd79a8', '#fdcb6e', '#e17055', '#81ecec', '#fab1a0'
];

// –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USER_STATUSES = [
  { text: '–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ', emoji: 'üöß', color: 'text-red-400' },
  { text: '–≤ –æ—á–µ—Ä–µ–¥–∏', emoji: '‚è≥', color: 'text-yellow-400' },
  { text: '–ø—Ä–æ—à–µ–ª', emoji: '‚úÖ', color: 'text-green-400' },
  { text: '–≤–µ—Ä–Ω—É–ª—Å—è', emoji: 'üîÑ', color: 'text-blue-400' },
  { text: '–∂–¥–µ—Ç', emoji: 'üò¥', color: 'text-purple-400' },
  { text: '–ø–∞–Ω–∏–∫—É–µ—Ç', emoji: 'üò±', color: 'text-pink-400' },
  { text: '–≥–æ—Ç–æ–≤–∏—Ç—Å—è', emoji: 'üéí', color: 'text-orange-400' },
  { text: '—Ä–∞–∑–º—ã—à–ª—è–µ—Ç', emoji: 'ü§î', color: 'text-indigo-400' }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
function getUserColor(nick: string): string {
  let hash = 0;
  for (let i = 0; i < nick.length; i++) {
    hash = nick.charCodeAt(i) + ((hash << 5) - hash);
  }
  return USER_COLORS[Math.abs(hash) % USER_COLORS.length];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
function getRandomStatus() {
  return USER_STATUSES[Math.floor(Math.random() * USER_STATUSES.length)];
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
const MessageItem = React.memo(({ 
  m, 
  getUserColor, 
  react 
}: { 
  m: Msg; 
  getUserColor: (nick: string) => string; 
  react: (msgId: string, emoji: string) => void;
}) => {
  const handleAnimationEnd = useCallback(() => {
    if (m.isNew) {
      // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ isNew –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
  }, [m.isNew]);

  return (
    <div
      className={`text-sm group hover:bg-muted/30 p-2 rounded-lg transition-all duration-300 ${
        m.isNew ? 'animate-slide-in-right bg-primary/10 border-l-4 border-primary' : ''
      }`}
      onAnimationEnd={handleAnimationEnd}
    >
      <div className="flex justify-between items-start gap-2">
        <div className="flex-1 min-w-0">
          <div className="flex flex-wrap items-center gap-1 mb-1">
            <span className="text-muted-foreground text-xs">{new Date(m.ts).toLocaleTimeString()}</span>
            <span 
              className="font-medium"
              style={{ color: m.userColor || getUserColor(m.nick) }}
            >
              {m.nick}:
            </span>
            {m.userStatus && (
              <span className={`text-xs px-2 py-0.5 rounded-full bg-muted ${
                typeof m.userStatus === 'string' 
                  ? 'text-muted-foreground' 
                  : (m.userStatus?.color || 'text-muted-foreground')
              }`}>
                {typeof m.userStatus === 'string' 
                  ? `üë§ ${m.userStatus}` 
                  : `${m.userStatus?.emoji || 'üë§'} ${m.userStatus?.text || m.userStatus}`
                }
              </span>
            )}
          </div>
          <div className="break-words">{m.text}</div>
        </div>
        <div className="flex gap-1 opacity-0 group-hover:opacity-100 sm:opacity-0 sm:group-hover:opacity-100 transition-opacity flex-shrink-0">
          <button
            onClick={() => react(m.id, "üëç")}
            className="text-xs hover:scale-125 transition-transform px-1 py-0.5 rounded hover:bg-muted"
            title="–ù—Ä–∞–≤–∏—Ç—Å—è"
          >
            üëç
          </button>
          <button
            onClick={() => react(m.id, "üòÇ")}
            className="text-xs hover:scale-125 transition-transform px-1 py-0.5 rounded hover:bg-muted"
            title="–°–º–µ—à–Ω–æ"
          >
            üòÇ
          </button>
          <button
            onClick={() => react(m.id, "üòÆ")}
            className="text-xs hover:scale-125 transition-transform px-1 py-0.5 rounded hover:bg-muted"
            title="–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ"
          >
            üòÆ
          </button>
          <button
            onClick={() => react(m.id, "üò¢")}
            className="text-xs hover:scale-125 transition-transform px-1 py-0.5 rounded hover:bg-muted"
            title="–ì—Ä—É—Å—Ç–Ω–æ"
          >
            üò¢
          </button>
        </div>
      </div>
      {m.reactions && Object.keys(m.reactions).length > 0 && (
        <div className="flex gap-1 mt-1 flex-wrap">
          {Object.entries(m.reactions).map(([emoji, count]) => (
            <button
              key={emoji}
              onClick={() => react(m.id, emoji)}
              className="text-xs bg-muted hover:bg-muted/80 px-1.5 py-0.5 rounded-full flex items-center gap-1 transition-colors animate-fade-in-up"
            >
              <span>{emoji}</span>
              <span>{count}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
});

export default function ChatBox() {
  const chatUrl = process.env.NEXT_PUBLIC_CHAT_URL!;
  const url = chatUrl?.startsWith('http') ? chatUrl : `https://${chatUrl}`;
  const [socket, setSocket] = useState<Socket | null>(null);
  const [ready, setReady] = useState(false);
  const [msgs, setMsgs] = useState<Msg[]>([]);
  const [text, setText] = useState("");
  const [nick, setNick] = useState("–ê–Ω–æ–Ω–∏–º");
  const [userStatus, setUserStatus] = useState(() => getRandomStatus());
  const listRef = useRef<HTMLDivElement>(null);
  const [lastSend, setLastSend] = useState(0);
  const [isConnecting, setIsConnecting] = useState(true);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  useEffect(() => {
    if (!url) {
      console.warn("NEXT_PUBLIC_CHAT_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      setConnectionError("URL —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
      setIsConnecting(false);
      return;
    }

    setIsConnecting(true);
    setConnectionError(null);

    const s = io(url, { 
      transports: ["websocket"],
      timeout: 10000,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });
    
    setSocket(s);
    
    s.on("connect", () => {
      setReady(true);
      setIsConnecting(false);
      setConnectionError(null);
    });
    
    s.on("connect_error", (error) => {
      console.error("Connection error:", error);
      setConnectionError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É");
      setIsConnecting(false);
    });
    
    s.on("disconnect", () => {
      setReady(false);
      setIsConnecting(true);
    });
    
    s.on("recent", (items: Msg[]) => {
      const itemsWithColors = items.map(item => ({
        ...item,
        userColor: item.userColor || getUserColor(item.nick),
        userStatus: item.userStatus || getRandomStatus()
      }));
      setMsgs(itemsWithColors);
    });
    
    s.on("msg", (item: Msg) => {
      const itemWithColor = {
        ...item,
        userColor: item.userColor || getUserColor(item.nick),
        userStatus: item.userStatus || getRandomStatus(),
        isNew: true
      };
      setMsgs(prev => [...prev, itemWithColor]);
    });
    
    s.on("reaction", (data: { msgId: string; emoji: string; count: number }) => {
      setMsgs(prev => prev.map(msg =>
        msg.id === data.msgId
          ? {
              ...msg,
              reactions: {
                ...msg.reactions,
                [data.emoji]: data.count
              }
            }
          : msg
      ));
    });
    
    s.on("messageDeleted", (data: { messageId: string }) => {
      setMsgs(prev => prev.filter(msg => msg.id !== data.messageId));
    });
    
    return () => {
      s.disconnect();
    };
  }, [url]);

  useEffect(() => {
    if (listRef.current) {
      const isNearBottom = listRef.current.scrollTop + listRef.current.clientHeight >= listRef.current.scrollHeight - 100;
      if (isNearBottom) {
        listRef.current.scrollTo({ top: listRef.current.scrollHeight, behavior: "smooth" });
      }
    }
  }, [msgs.length]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      const newHeight = Math.min(textareaRef.current.scrollHeight, 200);
      textareaRef.current.style.height = `${newHeight}px`;
    }
  }, [text]);

  const send = useCallback(() => {
    const t = text.trim();
    if (!t || !ready) return;
    const now = Date.now();
    if (now - lastSend < 500) return; // –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (t.startsWith('/')) {
      handleCommand(t);
      setText("");
      return;
    }
    
    socket?.emit("msg", { 
      text: t, 
      nick, 
      userColor: getUserColor(nick),
      userStatus: typeof userStatus === 'string' ? userStatus : userStatus.text
    });
    setLastSend(now);
    setText("");
  }, [text, ready, lastSend, nick, userStatus, socket, getUserColor]);

  function handleCommand(command: string) {
    const cmd = command.toLowerCase();
    
    if (cmd === '/help') {
      const helpText = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/time - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
/joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞ –ø—Ä–æ –≥—Ä–∞–Ω–∏—Ü—ã`;
      
      socket?.emit("msg", { 
        text: helpText, 
        nick: "–°–∏—Å—Ç–µ–º–∞", 
        userColor: "#ff6b6b",
        userStatus: "—Å–∏—Å—Ç–µ–º–∞"
      });
    } else if (cmd === '/time') {
      const deadlineIso = process.env.NEXT_PUBLIC_DEADLINE_ISO || "2025-01-01T00:00:00+02:00";
      const deadline = dayjs(deadlineIso);
      const now = dayjs();
      const diff = deadline.diff(now);
      const dur = dayjs.duration(Math.max(diff, 0));
      
      const timeText = diff <= 0 
        ? "–ì—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞! üò±"
        : `–î–æ –∑–∞–∫—Ä—ã—Ç–∏—è: ${Math.floor(dur.asDays())}–¥ ${dur.hours()}—á ${dur.minutes()}–º ${dur.seconds()}—Å`;
      
      socket?.emit("msg", { 
        text: timeText, 
        nick: "–°–∏—Å—Ç–µ–º–∞", 
        userColor: "#4ecdc4",
        userStatus: "—Å–∏—Å—Ç–µ–º–∞"
      });
    } else if (cmd === '/joke') {
      const jokes = [
        "–ü–æ—á–µ–º—É –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫–∏ –Ω–µ –∏–≥—Ä–∞—é—Ç –≤ –ø—Ä—è—Ç–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç! üòÑ",
        "–ß—Ç–æ —Å–∫–∞–∑–∞–ª —á–µ–º–æ–¥–∞–Ω –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫—É? '–Ø –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–µ–∑–¥–æ–º!' üß≥",
        "–ü–æ—á–µ–º—É –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–µ –ó–æ–ª—É—à–∫–∞! üïõ",
        "–ß—Ç–æ –æ–±—â–µ–≥–æ —É –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ—Ç–∞? –û–±–∞ –ª—é–±—è—Ç —Å–∏–¥–µ—Ç—å –Ω–∞ –ø–æ—Ä–æ–≥–µ! üê±",
        "–ü–æ—á–µ–º—É —Ç—É—Ä–∏—Å—Ç—ã –Ω–µ –±–æ—è—Ç—Å—è –≥—Ä–∞–Ω–∏—Ü? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å –ø–∞—Å–ø–æ—Ä—Ç! üìò",
        "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –ø–∞—Å–ø–æ—Ä—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ? '–Ø –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, —á—Ç–æ —è —Ç–∞–∫–æ–π —Ç–æ–ª—Å—Ç—ã–π!' üìñ"
      ];
      
      const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
      
      socket?.emit("msg", { 
        text: randomJoke, 
        nick: "–°–∏—Å—Ç–µ–º–∞", 
        userColor: "#f6ad55",
        userStatus: "—Å–∏—Å—Ç–µ–º–∞"
      });
    } else {
      socket?.emit("msg", { 
        text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`, 
        nick: "–°–∏—Å—Ç–µ–º–∞", 
        userColor: "#fc8181",
        userStatus: "—Å–∏—Å—Ç–µ–º–∞"
      });
    }
  }

  const react = useCallback((msgId: string, emoji: string) => {
    socket?.emit("react", { msgId, emoji });
  }, [socket]);

  if (!url) {
    return (
      <div className="w-full max-w-2xl mx-auto p-4 text-center text-muted-foreground">
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4 shadow-sm">
          <div className="text-destructive font-semibold mb-2">‚ö†Ô∏è –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>
          <div className="text-sm">URL —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (NEXT_PUBLIC_CHAT_URL)</div>
        </div>
      </div>
    );
  }

  if (connectionError) {
    return (
      <div className="w-full max-w-2xl mx-auto p-4">
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4 text-center shadow-sm">
          <div className="text-destructive font-semibold mb-2">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</div>
          <div className="text-sm text-muted-foreground mb-3">{connectionError}</div>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-destructive hover:bg-destructive/90 text-destructive-foreground rounded-lg text-sm transition-colors shadow-sm"
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-2xl mx-auto px-4 sm:px-0">
      <div className="text-sm text-muted-foreground flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</span>
          {isConnecting && (
            <div className="flex items-center gap-1 text-xs text-accent-foreground">
              <div className="w-2 h-2 bg-accent-foreground rounded-full animate-pulse"></div>
              <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>
            </div>
          )}
          {ready && !isConnecting && (
            <div className="flex items-center gap-1 text-xs text-primary">
              <div className="w-2 h-2 bg-primary rounded-full"></div>
              <span>–ü–æ–¥–∫–ª—é—á–µ–Ω</span>
            </div>
          )}
        </div>
        <div className="flex items-center gap-2">
          <span 
            className="text-xs font-medium"
            style={{ color: getUserColor(nick) }}
          >
            {nick}
          </span>
          <span className={`text-xs px-2 py-0.5 rounded-full bg-muted ${userStatus.color}`}>
            {userStatus.emoji} {userStatus.text}
          </span>
        </div>
      </div>
      <div ref={listRef} className="h-64 sm:h-72 overflow-y-auto rounded-2xl bg-card p-3 space-y-2 border border-border shadow-sm">
        {msgs.map(m => (
          <MessageItem
            key={m.id}
            m={m}
            getUserColor={getUserColor}
            react={react}
          />
        ))}
        {msgs.length === 0 && <div className="text-muted-foreground">–¢–∏—à–∏–Ω–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ</div>}
      </div>
      <div className="mt-3 space-y-3">
        {/* –ü–æ–ª–µ –¥–ª—è –Ω–∏–∫–Ω–µ–π–º–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ */}
        <div className="space-y-2">
          <div className="flex gap-2">
            <input
              className="flex-1 bg-input border border-border rounded-xl px-3 py-2 text-sm outline-none focus:border-ring focus:ring-1 focus:ring-ring transition-colors shadow-sm"
              placeholder="–í–∞—à –Ω–∏–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={nick}
              onChange={e => setNick(e.target.value)}
            />
            <select
              className="bg-input border border-border rounded-xl px-3 py-2 text-sm min-w-0 outline-none focus:border-ring focus:ring-1 focus:ring-ring transition-colors shadow-sm"
              value={typeof userStatus === 'string' ? userStatus : userStatus.text}
              onChange={e => {
                const status = USER_STATUSES.find(s => s.text === e.target.value);
                if (status) setUserStatus(status);
              }}
            >
              {USER_STATUSES.map(status => (
                <option key={status.text} value={status.text}>
                  {status.emoji} {status.text}
                </option>
              ))}
            </select>
          </div>
          <div className="text-xs text-muted-foreground text-center">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
          </div>
        </div>
        
        {/* –ù–æ–≤–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ —Å—Ç–∏–ª–µ ChatGPT */}
        <div className="relative">
          <div className="flex flex-col rounded-[28px] p-2 shadow-sm transition-colors bg-white border dark:bg-[#303030] dark:border-transparent cursor-text">
            <textarea
              ref={textareaRef}
              rows={1}
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              disabled={!ready}
              className="w-full resize-none border-0 bg-transparent p-3 text-foreground dark:text-white placeholder:text-muted-foreground dark:placeholder:text-gray-300 focus:ring-0 focus-visible:outline-none min-h-12"
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  send();
                }
              }}
            />
            
            <div className="mt-0.5 p-1 pt-0">
              <div className="flex items-center gap-2">
                <button
                  type="button"
                  className="flex h-8 w-8 items-center justify-center rounded-full text-foreground dark:text-white transition-colors hover:bg-accent dark:hover:bg-[#515151] focus-visible:outline-none"
                >
                  <span className="text-lg">üìé</span>
                </button>
                
                <div className="ml-auto flex items-center gap-2">
                  <button
                    type="button"
                    className="flex h-8 w-8 items-center justify-center rounded-full text-foreground dark:text-white transition-colors hover:bg-accent dark:hover:bg-[#515151] focus-visible:outline-none"
                  >
                    <span className="text-lg">üé§</span>
                  </button>

                  <button
                    type="button"
                    onClick={send}
                    disabled={!ready || !text.trim()}
                    className="flex h-8 w-8 items-center justify-center rounded-full text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none bg-black text-white hover:bg-black/80 dark:bg-white dark:text-black dark:hover:bg-white/80 disabled:bg-black/40 dark:disabled:bg-[#515151]"
                  >
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M12 5.25L12 18.75" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                      <path d="M18.75 12L12 5.25L5.25 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="mt-2 text-xs text-muted-foreground text-center space-y-1">
        <div>–ü—Ä–æ—Å—å–±–∞ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—é –∑–∞–∫–æ–Ω–∞</div>
      </div>
    </div>
  );
}
